error_log /var/log/nginx/error.log debug;

upstream myapp {
    server trippidy-payara:8080;
}

server {
    listen 80;
    server_name trippidy.koten.dev;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect HTTP to HTTPS for all domains and subdomains
#     location / {
#         return 301 https://$host:9680$request_uri;
#     }

    # Payara server providing API
    location /api {
        proxy_pass  http://myapp;
        proxy_set_header    Host                $http_host;
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   $scheme;
    }

}

server {
    listen 443 ssl;
    server_name trippidy.koten.dev;
    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/trippidy.koten.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/trippidy.koten.dev/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location /jenkins/ {
            proxy_pass  http://jenkins:8080/jenkins/;
            proxy_set_header    Host                $http_host;
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
    }

    # I use this proxy to get images for the client because when the client in running on localhost, there is a problem with CORS in the response headers from some external services like gravatar.
    location /external-img/ {
        # Remove the /external-img prefix
        rewrite ^/external-img/(.*) /$1 break;

        # The actual image URL will be passed as a query parameter
        resolver 8.8.8.8;
        proxy_pass $arg_url;

        # Set headers that the external service might expect.
        proxy_set_header User-Agent $http_user_agent;
        #proxy_set_header Referer $http_referer;

        # Pass the Host header if necessary.
        # proxy_set_header Host $host;

        # Use the original client IP address for logging on the upstream server.
        proxy_set_header X-Real-IP $remote_addr;

        # If the external service requires cookies, you would need to handle them as well.
        proxy_set_header Cookie $http_cookie;

        # Add the CORS headers here
        set $cors "";
        if ($http_origin ~* (http://localhost:3000)) {
            set $cors "true";
        }

        # Preflight request handling
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }

        if ($cors = "true") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
        }
    }

    # Another nginx server running flutter web app
    location / {
        # Add the CORS headers here
        if ($http_origin ~* (http://localhost:3000)) {
            add_header 'Access-Control-Allow-Origin' '$http_origin';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
        }

        # Preflight request handling
        if ($request_method = OPTIONS ) {
            add_header 'Access-Control-Allow-Origin' '$http_origin';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
            # Set the maximum age for the preflight request caching
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }

        proxy_pass  http://flutter-web-app:80;
        proxy_set_header    Host                $http_host;
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   $scheme;
    }

    # Payara server providing API
    location /api {
        # Add the CORS headers here
        if ($http_origin ~* (http://localhost:3000)) {
            add_header 'Access-Control-Allow-Origin' '$http_origin';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
        }

        # Preflight request handling
        if ($request_method = OPTIONS ) {
            add_header 'Access-Control-Allow-Origin' '$http_origin';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
            # Set the maximum age for the preflight request caching
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }

        proxy_pass  http://trippidy-payara:8080;
        proxy_set_header    Host                $http_host;
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   $scheme;
    }

}